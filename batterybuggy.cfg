[files]
logfile = '/media/sdcard/log'
summaryfile = '/media/sdcard/summary'
errfile = '/media/sdcard/baterrlog'
alarmfile = '/media/sdcard/alarmlog'
hoursummaryfile = '/media/sdcard/hoursummary'
daysummaryfile = '/media/sdcard/daysummary'
monthsummaryfile = '/media/sdcard/monthsummary'
yearsummaryfile = '/media/sdcard/yearsummary'

[logging]
data = "self.printtime+batdata.vbat+batdata.vdelta \
	+batdata.iall+batdata.soctxt+batdata.socadjtxt+str(batdata.pip.rawdat)"

[battery]
name = 'Buggy'
numcells = 15
capacity = 80
maxchargerate = 50
targetsoc = 0.70 # target SOC for demand management
minsocdif = 0.03 # difference between target SOC and demand shutdown SOC
overvoltage = 3.650
undervoltage = 2.900
float = 50.2  # battery float Voltage
bulk = 52.5 # battery bulk/CV voltage
ahloss = 0.027090130542655324
vreset = 51.8  # voltage to reset DOD counter
ireset = 4.0  # current to reset DOD counter
ilowcurrent = 4.0 # C/20 lowcurrent voltage logging current

[Interfaces]
bms = 'bms(KarrakBMS)' # string in brackets is harware name, from read command 05
beagle ='beagle'
pwmcontroller='pwmcontroller'
[Ports]
bmsport = '/dev/ttyS1' # where to look for bmsport

[VoltageInputs]
v01 = 'self.bms.rawdat["V01"]'
v02 = 'self.bms.rawdat["V02"]'
v03 = 'self.bms.rawdat["V03"]'
v04 = 'self.bms.rawdat["V04"]'
v05 = 'self.bms.rawdat["V05"]'
v06 = 'self.bms.rawdat["V06"]'
v07 = 'self.bms.rawdat["V07"]'
v08 = 'self.bms.rawdat["V08"]'
v09 = 'self.bms.rawdat["V09"]'
v10 = 'self.bms.rawdat["V10"]'
v11 = 'self.bms.rawdat["V11"]'
v12 = 'self.bms.rawdat["V12"]'
v13 = 'self.bms.rawdat["V13"]'
v14 = 'self.bms.rawdat["V14"]'
v15 = 'self.bms.rawdat["V15"]'
vbat = 'self.bms.rawdat["V15"]'
vcharger = 'self.beagle.rawdat["ADCP9_39"]*(680+47000)/680'

[CurrentInputs]
iin1 = 'self.pip.rawdat["PVI"]'
iin2 = 'self.pip2.rawdat["PVI"]'
iin3 = 'self.bms.rawdat["Ibat"]'
iin4 = 'self.current[0]+self.current[1]'
iin5 = 'self.current[2]-self.current[3]'

[TemperatureInputs]
tin1 = 'self.bms.rawdat["T1"]'
tin2 = 'self.bms.rawdat["T2"]'

[BalanceFlags]
balf01 = 'self.bms.rawdat["Bal"] & 1'
balf02 = 'self.bms.rawdat["Bal"] >> 1 & 1'
balf03 = 'self.bms.rawdat["Bal"] >> 2 & 1'
balf04 = 'self.bms.rawdat["Bal"] >> 3 & 1'
balf05 = 'self.bms.rawdat["Bal"] >> 4 & 1'
balf06 = 'self.bms.rawdat["Bal"] >> 5 & 1'
balf07 = 'self.bms.rawdat["Bal"] >> 6 & 1'
balf08 = 'self.bms.rawdat["Bal"] >> 7 & 1'
balf09 = 'self.bms.rawdat["Bal"] >> 8 & 1'
balf10 = 'self.bms.rawdat["Bal"] >> 9 & 1'
balf11 = 'self.bms.rawdat["Bal"] >> 10 & 1'
balf12 = 'self.bms.rawdat["Bal"] >> 11 & 1'
balf13 = 'self.bms.rawdat["Bal"] >> 12 & 1'
balf14 = 'self.bms.rawdat["Bal"] >> 13 & 1'
balf15 = 'self.bms.rawdat["Bal"] >> 14 & 1'

[Status]
chargestate1 = "self.pip.rawdat['ChgStat']"
chargestate2 = "self.pip2.rawdat['ChgStat']"

[sampling]
sampletime = 10
samplesav = 1

[calibrate]
currentgain = [-1.0, -1.0, -0.02, 1.0, 1.0]
currentoffset = [-0.0, -0.0, 0.0, 0.0, 0.0]
batvgain = 1
measured = [0.0, 3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0, 24.0, 27.0, 30.0, 33.0, 36.0, 39.0, 42.0, 45.0, 48.0, 48.0]
displayed = [0.0, 3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0, 24.0, 27.0, 30.0, 33.0, 36.0, 39.0, 42.0, 45.0, 48.0, 48.0]
measureddelta = [ 0.0, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000]
displayeddelta = [ 0.0, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000]
delta = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

[alarms]
overv = ['batdata.pip.setparamnoerror("PCVV" +str(config["battery"]["bulk"]))', \
	'self.test=batdata.maxcellv>3.65', \
	'batdata.pip.setparamnoerror("PCVV" +str(config["battery"]["float"]))', \
	'self.test=batdata.maxcellv<3.40', \
	'batdata.pip.setparamnoerror("PCVV" +str(config["battery"]["bulk"]))']
underv = ['batdata.pip.setparamnoerror("PSDV45.0")', \
	'self.test=batdata.mincellv<2.90', \
	'batdata.pip.setparamnoerror("MNCHGC0497")', \
	'self.test=batdata.mincellv>3.20', \
	'batdata.pip.setparamnoerror("MNCHGC0498")']
swapinverter = ['pass',  \
	'self.test=localtime().tm_hour==8',  \
	'batdata.pip.swapinverter()',  \
	'self.test=localtime().tm_hour==9',  \
	'pass']
acoverload = ['pass',  \
	'self.test=batdata.pip.acloadav+batdata.pip2.acloadav>config["Inverters"]["turnonslave"]',  \
	'batdata.pip.slaveinvon()',  \
	'self.test=batdata.pip.timeoverload==0.0',  \
	'batdata.pip.slaveinvoff()']
